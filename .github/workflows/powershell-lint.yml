name: PowerShell Graph API Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**/*.ps1'
      - 'modules/**/*.ps1'
      - 'modules/**/*.psm1'
      - 'tests/**/*.ps1'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/**/*.ps1'
      - 'modules/**/*.ps1'
      - 'modules/**/*.psm1'
      - 'tests/**/*.ps1'
  workflow_dispatch:

jobs:
  validate-powershell:
    name: PowerShell and Graph API Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      uses: actions/setup-powershell@v1
      
    - name: Install required modules
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        
        Write-Host "Installing core development modules..." -ForegroundColor Blue
        
        # Core development modules (these should always be available)
        try {
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -ErrorAction Stop
          Write-Host "✅ PSScriptAnalyzer installed" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ Failed to install PSScriptAnalyzer: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
        try {
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -ErrorAction Stop
          Write-Host "✅ Pester installed" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ Failed to install Pester: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
        # Microsoft Graph modules (may not be available in all environments)
        Write-Host "Attempting to install Microsoft Graph modules..." -ForegroundColor Blue
        $graphModules = @(
          "Microsoft.Graph.Authentication",
          "Microsoft.Graph.Users", 
          "Microsoft.Graph.Groups"
        )
        
        foreach ($module in $graphModules) {
          try {
            Install-Module -Name $module -Force -Scope CurrentUser -ErrorAction Stop
            Write-Host "✅ $module installed" -ForegroundColor Green
          }
          catch {
            Write-Host "⚠️ Failed to install $module (this may be expected in CI environment)" -ForegroundColor Yellow
          }
        }
        
    - name: Validate repository structure
      shell: pwsh
      run: |
        Write-Host "Validating repository structure..." -ForegroundColor Blue
        
        # Check for required directories
        $requiredDirs = @("scripts", "docs", "tests", ".github")
        $missingDirs = @()
        
        foreach ($dir in $requiredDirs) {
          if (Test-Path $dir) {
            Write-Host "✅ Directory exists: $dir" -ForegroundColor Green
          } else {
            Write-Host "❌ Missing directory: $dir" -ForegroundColor Red
            $missingDirs += $dir
          }
        }
        
        # Check for required files
        $requiredFiles = @("README.md", "LICENSE", ".gitignore")
        $missingFiles = @()
        
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Host "✅ File exists: $file" -ForegroundColor Green
          } else {
            Write-Host "❌ Missing file: $file" -ForegroundColor Red
            $missingFiles += $file
          }
        }
        
        if ($missingDirs.Count -eq 0 -and $missingFiles.Count -eq 0) {
          Write-Host "✅ Repository structure validation passed" -ForegroundColor Green
        } else {
          Write-Host "⚠️ Repository structure has some missing components, but continuing..." -ForegroundColor Yellow
        }
        
    - name: Run PSScriptAnalyzer on scripts
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer validation..." -ForegroundColor Blue
        
        # Check if PSScriptAnalyzer is available
        try {
          Import-Module PSScriptAnalyzer -ErrorAction Stop
          Write-Host "✅ PSScriptAnalyzer module loaded" -ForegroundColor Green
        }
        catch {
          Write-Host "❌ PSScriptAnalyzer not available, skipping analysis" -ForegroundColor Red
          exit 0
        }
        
        $analysisResults = @()
        $errorCount = 0
        $warningCount = 0
        
        # Find PowerShell scripts
        $scriptFiles = @()
        if (Test-Path "./scripts") {
          $scriptFiles += Get-ChildItem -Path "./scripts" -Filter "*.ps1" -Recurse -ErrorAction SilentlyContinue
        }
        if (Test-Path "./modules") {
          $scriptFiles += Get-ChildItem -Path "./modules" -Filter "*.ps*1" -Recurse -ErrorAction SilentlyContinue
        }
        if (Test-Path "./tests") {
          $scriptFiles += Get-ChildItem -Path "./tests" -Filter "*.ps1" -Recurse -ErrorAction SilentlyContinue
        }
        
        if ($scriptFiles.Count -eq 0) {
          Write-Host "ℹ️ No PowerShell scripts found to analyze" -ForegroundColor Blue
          exit 0
        }
        
        Write-Host "Found $($scriptFiles.Count) PowerShell files to analyze" -ForegroundColor Blue
        
        foreach ($file in $scriptFiles) {
          Write-Host "Analyzing: $($file.Name)" -ForegroundColor Cyan
          
          try {
            $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Error,Warning -ErrorAction Stop
            
            if ($results) {
              $analysisResults += $results
              $fileErrors = ($results | Where-Object Severity -eq 'Error').Count
              $fileWarnings = ($results | Where-Object Severity -eq 'Warning').Count
              $errorCount += $fileErrors
              $warningCount += $fileWarnings
              
              Write-Host "  Errors: $fileErrors, Warnings: $fileWarnings" -ForegroundColor Yellow
              
              # Show specific issues for errors
              if ($fileErrors -gt 0) {
                $results | Where-Object Severity -eq 'Error' | ForEach-Object {
                  Write-Host "    ERROR: $($_.Message)" -ForegroundColor Red
                }
              }
            } else {
              Write-Host "  ✅ Clean" -ForegroundColor Green
            }
          }
          catch {
            Write-Host "  ⚠️ Failed to analyze $($file.Name): $($_.Exception.Message)" -ForegroundColor Yellow
          }
        }
        
        Write-Host "`nAnalysis Summary:" -ForegroundColor Blue
        Write-Host "Total Errors: $errorCount" -ForegroundColor $(if($errorCount -gt 0){'Red'}else{'Green'})
        Write-Host "Total Warnings: $warningCount" -ForegroundColor $(if($warningCount -gt 0){'Yellow'}else{'Green'})
        
        if ($errorCount -gt 0) {
          Write-Host "❌ PSScriptAnalyzer found $errorCount errors. Please fix before merging." -ForegroundColor Red
          exit 1
        } else {
          Write-Host "✅ PSScriptAnalyzer validation passed!" -ForegroundColor Green
        }
        
    - name: Validate PowerShell syntax
      shell: pwsh
      run: |
        Write-Host "Validating PowerShell syntax..." -ForegroundColor Blue
        
        $syntaxErrors = @()
        $scriptFiles = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object { 
          $_.FullName -notlike "*/.git/*" -and $_.FullName -notlike "*/.github/*"
        }
        
        if ($scriptFiles.Count -eq 0) {
          Write-Host "ℹ️ No PowerShell scripts found for syntax validation" -ForegroundColor Blue
          exit 0
        }
        
        Write-Host "Checking syntax for $($scriptFiles.Count) PowerShell files" -ForegroundColor Blue
        
        foreach ($file in $scriptFiles) {
          try {
            $content = Get-Content $file.FullName -Raw -ErrorAction Stop
            if ($content) {
              $null = [System.Management.Automation.PSParser]::Tokenize($content, [ref]$null)
              Write-Host "✅ Syntax OK: $($file.Name)" -ForegroundColor Green
            } else {
              Write-Host "⚠️ Empty file: $($file.Name)" -ForegroundColor Yellow
            }
          }
          catch {
            Write-Host "❌ Syntax Error in $($file.Name): $($_.Exception.Message)" -ForegroundColor Red
            $syntaxErrors += $file.Name
          }
        }
        
        if ($syntaxErrors.Count -gt 0) {
          Write-Host "❌ Found syntax errors in $($syntaxErrors.Count) files" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "✅ All PowerShell files have valid syntax" -ForegroundColor Green
        }
        
    - name: Run Pester tests (if available)
      shell: pwsh
      run: |
        if (-not (Test-Path ./tests)) {
          Write-Host "ℹ️ No tests directory found, skipping Pester tests" -ForegroundColor Blue
          exit 0
        }
        
        # Check if Pester is available
        try {
          Import-Module Pester -ErrorAction Stop
          Write-Host "✅ Pester module loaded" -ForegroundColor Green
        }
        catch {
          Write-Host "❌ Pester not available, skipping tests" -ForegroundColor Red
          exit 0
        }
        
        Write-Host "Running Pester tests..." -ForegroundColor Blue
        
        try {
          # Configure Pester for older versions compatibility
          $pesterVersion = (Get-Module Pester).Version
          Write-Host "Using Pester version: $pesterVersion" -ForegroundColor Blue
          
          if ($pesterVersion.Major -ge 5) {
            # Pester 5.x syntax
            $pesterConfig = New-PesterConfiguration
            $pesterConfig.Run.Path = './tests'
            $pesterConfig.Output.Verbosity = 'Normal'
            $pesterConfig.TestResult.Enabled = $true
            $pesterConfig.TestResult.OutputPath = './TestResults.xml'
            
            $result = Invoke-Pester -Configuration $pesterConfig
            
            if ($result.FailedCount -gt 0) {
              Write-Host "❌ $($result.FailedCount) tests failed" -ForegroundColor Red
              exit 1
            } else {
              Write-Host "✅ All $($result.PassedCount) tests passed" -ForegroundColor Green
            }
          } else {
            # Pester 4.x syntax
            $result = Invoke-Pester -Path './tests' -OutputFile './TestResults.xml' -OutputFormat NUnitXml -PassThru
            
            if ($result.FailedCount -gt 0) {
              Write-Host "❌ $($result.FailedCount) tests failed" -ForegroundColor Red
              exit 1
            } else {
              Write-Host "✅ All $($result.PassedCount) tests passed" -ForegroundColor Green
            }
          }
        }
        catch {
          Write-Host "⚠️ Error running Pester tests: $($_.Exception.Message)" -ForegroundColor Yellow
          Write-Host "Continuing with other validations..." -ForegroundColor Yellow
        }
        
    - name: Basic security validation
      shell: pwsh
      run: |
        Write-Host "Performing basic security validation..." -ForegroundColor Blue
        
        $securityIssues = @()
        $scriptFiles = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object { 
          $_.FullName -notlike "*/.git/*" 
        }
        
        if ($scriptFiles.Count -eq 0) {
          Write-Host "ℹ️ No PowerShell scripts found for security validation" -ForegroundColor Blue
          exit 0
        }
        
        foreach ($file in $scriptFiles) {
          try {
            $content = Get-Content $file.FullName -Raw -ErrorAction Stop
            
            # Check for potential hardcoded credentials (basic patterns)
            $credentialPatterns = @(
              'password\s*=\s*["''][^"'']{8,}["'']',
              'secret\s*=\s*["''][^"'']{20,}["'']',
              'key\s*=\s*["''][^"'']{20,}["'']'
            )
            
            foreach ($pattern in $credentialPatterns) {
              if ($content -match $pattern) {
                $securityIssues += "Potential hardcoded credential in $($file.Name)"
              }
            }
          }
          catch {
            Write-Host "⚠️ Could not read file $($file.Name) for security validation" -ForegroundColor Yellow
          }
        }
        
        if ($securityIssues.Count -gt 0) {
          Write-Host "⚠️ Security review recommended:" -ForegroundColor Yellow
          $securityIssues | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
        } else {
          Write-Host "✅ No obvious security issues found" -ForegroundColor Green
        }
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('TestResults.xml') != ''
      with:
        name: test-results
        path: TestResults.xml
        
    - name: Validation summary
      shell: pwsh
      run: |
        Write-Host "`n🎉 PowerShell validation completed!" -ForegroundColor Green
        Write-Host "📋 Validation Summary:" -ForegroundColor Blue
        Write-Host "  ✅ Repository structure checked" -ForegroundColor Green
        Write-Host "  ✅ PowerShell syntax validated" -ForegroundColor Green
        Write-Host "  ✅ PSScriptAnalyzer checks completed" -ForegroundColor Green
        Write-Host "  ✅ Security validation performed" -ForegroundColor Green
        Write-Host "  ✅ Tests executed (if available)" -ForegroundColor Green
        Write-Host "`nWorkflow completed successfully! 🚀" -ForegroundColor Green
